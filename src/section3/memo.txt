필드
    클래스가 가지는 속성을 자바언어에서는 필드라고 함
    다른 언어에서는 멤버 변수라고 말하는 경우도 있음
    필드는 어떤 키워드와 함께 사용하느냐에 따라서 사용방법이 달라짐
    static이라는 키워드가 함께 사용되는 필드는 클래스 필드, 함께 사용되지 않는 필드는 인스턴스 필드라고 함

필드 선언 방법
    [접근제한자] [static] [final] 타입 필드명 [=초기값];
    이때, 대괄호는 생략이 가능함
    접근제한자는 Public, protected, private, default(아무것도 없는 경우) 사용할 수 있음
    필드명은 식별자 규칙을 따름. 다만 첫글자는 소문자로 시작하는 것이 관례
    타입은 기본형(boolean, byte, char, short, int, long, float, double)과 참조타입 (class, interface, array) 등이 나올 수 있음
    초기값이 없을 경우에는 참조형일 경우 null, boolean 형일 경우 false, 나머지 기본형은 모두 0으로 초기화됨

필드 선언 예제
    String name;
    String address = "경기도 부천시";
    public int age = 50;
    protected boolean flag;

User class 작성
    public class Person {
        String address;
        String name;
        ...
    }

자바의 메모리
    소스 코드, 클래스 파일 자체는 정적 (동적인 것들은 실행되면서 생성되는 것들을 말함)
    new 연산자를 사용할 때마다 메모리에 인스턴스가 생성
    인스턴스는 더 이상 참조되는 것이 없을 때, 가비지 컬렉션(Garbage Collection)이 됨
    static한 필드는 클래스가 로딩될 때 딱 한번 메모리에 올라가고 초기화
    인스턴스 메소드(static이 붙지 않은 메소드)는 인스턴스를 새성하고 나서 레퍼런스 변수를 이용해 사용 가능
    클래스 메소드는 클래스명.메소드명()으로 사용 가능
    메소드 안에 선언된 변수들은 메소드가 실행될 때 메모리에 생성되었다가 메모리가 종료될 때 사라짐

추상화
    중요한 것은 남기고 불필요한 것은 제거
캡슐화
    관련된 것을 잘 모아서 가지고 있는 것
    관련된 것을 잘 모아서 가지고 있을수록 응집도(Cohension)가 높다고 표현
    캡슐화는 은닉화와도 관련되어 있음

다형성 & 오버로딩
다형성
    프로그램 언어의 다형성은 그 프로그래밍 언어의 자료형 체계의 성질을 나타내는 것
    ex) System.out.println() => 해당 메소드는 '인자를 출력하고 줄바꿈'하는데,
    중요한 것은 메소드 이름이 같음
메소드 오버로딩
    메서드의 이름은 같고 매개변수의 갯수나 타입이 다른 함수를 정의하는 것을 의미
    리턴값만을 다르게 갖는 오버로딩은 작성할 수 없음

패키지
    클래스는 패키지를 이용하여 관련된 클래스들을 관리
    패키지는 폴더와 거의 같은 기능을 제공
    패키지 이름 규칙 => 보통 도메인 이름을 거꾸로 적은 후에 프로젝트 이름 등을 붙여서 만들게 됨 (클래스 이름 충돌 막기 위함)



